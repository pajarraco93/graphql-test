type Group {
  id: Int!
  name: String!
  genre: String
  groupInfo: GroupInfo
}

type GroupInfo{
  info: String
}

type Album {
  id: Int!
  name: String!
  composedBy: Group!
  year: Int   
}

type Song {
  id: Int!
  name: String!
  appearsIn: Album!
}

input newGroup {
  name: String!
  genre: String
}

input newAlbum {
  name: String!
  composedBy: String!
  year: Int   
}

input newSong {
  name: String!
  appearsIn: String!
}

type Query {
  allGroups: [Group]
  allAlbums: [Album]
  allSongs: [Song]
}

type Mutation {
  createGroup(input: newGroup!): Group
  createAlbum(input: newAlbum!): Album
  createSong(input: newSong!): Song
}

schema {
  query: Query
  mutation: Mutation
}